// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blockchain.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 区块头信息
// 	 version : 版本信息
// 	 parentHash :父哈希
// 	 txHash : 交易根哈希
// 	 stateHash :状态哈希
// 	 height : 区块高度
// 	 blockTime :区块产生时的时标
// 	 txCount : 区块上所有交易个数
// 	 difficulty :区块难度系数，
// 	 signature :交易签名
type Header struct {
	Version    int64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte     `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte     `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64      `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64      `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	TxCount    int64      `protobuf:"varint,9,opt,name=txCount" json:"txCount,omitempty"`
	Hash       []byte     `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	Difficulty uint32     `protobuf:"varint,11,opt,name=difficulty" json:"difficulty,omitempty"`
	Signature  *Signature `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Header) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Header) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Header) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Header) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *Header) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Header) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Header) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

//  参考Header解释
// mainHash 平行链上使用的字段，代表这个区块的主链hash
type Block struct {
	Version    int64          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte         `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte         `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte         `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64          `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64          `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	Difficulty uint32         `protobuf:"varint,11,opt,name=difficulty" json:"difficulty,omitempty"`
	MainHash   []byte         `protobuf:"bytes,12,opt,name=mainHash,proto3" json:"mainHash,omitempty"`
	MainHeight int64          `protobuf:"varint,13,opt,name=mainHeight" json:"mainHeight,omitempty"`
	Signature  *Signature     `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	Txs        []*Transaction `protobuf:"bytes,7,rep,name=txs" json:"txs,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Block) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Block) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Block) GetMainHash() []byte {
	if m != nil {
		return m.MainHash
	}
	return nil
}

func (m *Block) GetMainHeight() int64 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

func (m *Block) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Block) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Blocks struct {
	Items []*Block `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Blocks) GetItems() []*Block {
	if m != nil {
		return m.Items
	}
	return nil
}

type BlockSeqCB struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	URL      string `protobuf:"bytes,2,opt,name=URL" json:"URL,omitempty"`
	Encode   string `protobuf:"bytes,3,opt,name=encode" json:"encode,omitempty"`
	IsHeader bool   `protobuf:"varint,4,opt,name=isHeader" json:"isHeader,omitempty"`
}

func (m *BlockSeqCB) Reset()                    { *m = BlockSeqCB{} }
func (m *BlockSeqCB) String() string            { return proto.CompactTextString(m) }
func (*BlockSeqCB) ProtoMessage()               {}
func (*BlockSeqCB) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *BlockSeqCB) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockSeqCB) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *BlockSeqCB) GetEncode() string {
	if m != nil {
		return m.Encode
	}
	return ""
}

func (m *BlockSeqCB) GetIsHeader() bool {
	if m != nil {
		return m.IsHeader
	}
	return false
}

type BlockSeqCBs struct {
	Items []*BlockSeqCB `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockSeqCBs) Reset()                    { *m = BlockSeqCBs{} }
func (m *BlockSeqCBs) String() string            { return proto.CompactTextString(m) }
func (*BlockSeqCBs) ProtoMessage()               {}
func (*BlockSeqCBs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *BlockSeqCBs) GetItems() []*BlockSeqCB {
	if m != nil {
		return m.Items
	}
	return nil
}

type BlockSeq struct {
	Num    int64          `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Seq    *BlockSequence `protobuf:"bytes,2,opt,name=seq" json:"seq,omitempty"`
	Detail *BlockDetail   `protobuf:"bytes,3,opt,name=detail" json:"detail,omitempty"`
}

func (m *BlockSeq) Reset()                    { *m = BlockSeq{} }
func (m *BlockSeq) String() string            { return proto.CompactTextString(m) }
func (*BlockSeq) ProtoMessage()               {}
func (*BlockSeq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *BlockSeq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BlockSeq) GetSeq() *BlockSequence {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *BlockSeq) GetDetail() *BlockDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

type BlockSeqs struct {
	Seqs []*BlockSeq `protobuf:"bytes,1,rep,name=seqs" json:"seqs,omitempty"`
}

func (m *BlockSeqs) Reset()                    { *m = BlockSeqs{} }
func (m *BlockSeqs) String() string            { return proto.CompactTextString(m) }
func (*BlockSeqs) ProtoMessage()               {}
func (*BlockSeqs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *BlockSeqs) GetSeqs() []*BlockSeq {
	if m != nil {
		return m.Seqs
	}
	return nil
}

// 节点ID以及对应的Block
type BlockPid struct {
	Pid   string `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
	Block *Block `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
}

func (m *BlockPid) Reset()                    { *m = BlockPid{} }
func (m *BlockPid) String() string            { return proto.CompactTextString(m) }
func (*BlockPid) ProtoMessage()               {}
func (*BlockPid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *BlockPid) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *BlockPid) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

// resp
type BlockDetails struct {
	Items []*BlockDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *BlockDetails) GetItems() []*BlockDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

// resp
type Headers struct {
	Items []*Header `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *Headers) GetItems() []*Header {
	if m != nil {
		return m.Items
	}
	return nil
}

type HeadersPid struct {
	Pid     string   `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
	Headers *Headers `protobuf:"bytes,2,opt,name=headers" json:"headers,omitempty"`
}

func (m *HeadersPid) Reset()                    { *m = HeadersPid{} }
func (m *HeadersPid) String() string            { return proto.CompactTextString(m) }
func (*HeadersPid) ProtoMessage()               {}
func (*HeadersPid) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *HeadersPid) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *HeadersPid) GetHeaders() *Headers {
	if m != nil {
		return m.Headers
	}
	return nil
}

// 区块视图
// 	 head : 区块头信息
// 	 txCount :区块上交易个数
// 	 txHashes : 区块上交易的哈希列表
type BlockOverview struct {
	Head     *Header  `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	TxCount  int64    `protobuf:"varint,2,opt,name=txCount" json:"txCount,omitempty"`
	TxHashes [][]byte `protobuf:"bytes,3,rep,name=txHashes,proto3" json:"txHashes,omitempty"`
}

func (m *BlockOverview) Reset()                    { *m = BlockOverview{} }
func (m *BlockOverview) String() string            { return proto.CompactTextString(m) }
func (*BlockOverview) ProtoMessage()               {}
func (*BlockOverview) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *BlockOverview) GetHead() *Header {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *BlockOverview) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

// 区块详细信息
// 	 block : 区块信息
// 	 receipts :区块上所有交易的收据信息列表
type BlockDetail struct {
	Block          *Block         `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Receipts       []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
	KV             []*KeyValue    `protobuf:"bytes,3,rep,name=KV" json:"KV,omitempty"`
	PrevStatusHash []byte         `protobuf:"bytes,4,opt,name=prevStatusHash,proto3" json:"prevStatusHash,omitempty"`
}

func (m *BlockDetail) Reset()                    { *m = BlockDetail{} }
func (m *BlockDetail) String() string            { return proto.CompactTextString(m) }
func (*BlockDetail) ProtoMessage()               {}
func (*BlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *BlockDetail) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockDetail) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *BlockDetail) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

func (m *BlockDetail) GetPrevStatusHash() []byte {
	if m != nil {
		return m.PrevStatusHash
	}
	return nil
}

type Receipts struct {
	Receipts []*Receipt `protobuf:"bytes,1,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *Receipts) Reset()                    { *m = Receipts{} }
func (m *Receipts) String() string            { return proto.CompactTextString(m) }
func (*Receipts) ProtoMessage()               {}
func (*Receipts) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *Receipts) GetReceipts() []*Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type PrivacyKV struct {
	PrivacyKVToken []*PrivacyKVToken `protobuf:"bytes,1,rep,name=privacyKVToken" json:"privacyKVToken,omitempty"`
}

func (m *PrivacyKV) Reset()                    { *m = PrivacyKV{} }
func (m *PrivacyKV) String() string            { return proto.CompactTextString(m) }
func (*PrivacyKV) ProtoMessage()               {}
func (*PrivacyKV) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *PrivacyKV) GetPrivacyKVToken() []*PrivacyKVToken {
	if m != nil {
		return m.PrivacyKVToken
	}
	return nil
}

type PrivacyKVToken struct {
	Token   string      `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	TxIndex int32       `protobuf:"varint,2,opt,name=txIndex" json:"txIndex,omitempty"`
	Txhash  []byte      `protobuf:"bytes,3,opt,name=txhash,proto3" json:"txhash,omitempty"`
	KV      []*KeyValue `protobuf:"bytes,4,rep,name=KV" json:"KV,omitempty"`
}

func (m *PrivacyKVToken) Reset()                    { *m = PrivacyKVToken{} }
func (m *PrivacyKVToken) String() string            { return proto.CompactTextString(m) }
func (*PrivacyKVToken) ProtoMessage()               {}
func (*PrivacyKVToken) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *PrivacyKVToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PrivacyKVToken) GetTxIndex() int32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *PrivacyKVToken) GetTxhash() []byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

func (m *PrivacyKVToken) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

type ReceiptsAndPrivacyKV struct {
	Receipts  *Receipts  `protobuf:"bytes,1,opt,name=receipts" json:"receipts,omitempty"`
	PrivacyKV *PrivacyKV `protobuf:"bytes,2,opt,name=privacyKV" json:"privacyKV,omitempty"`
}

func (m *ReceiptsAndPrivacyKV) Reset()                    { *m = ReceiptsAndPrivacyKV{} }
func (m *ReceiptsAndPrivacyKV) String() string            { return proto.CompactTextString(m) }
func (*ReceiptsAndPrivacyKV) ProtoMessage()               {}
func (*ReceiptsAndPrivacyKV) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *ReceiptsAndPrivacyKV) GetReceipts() *Receipts {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *ReceiptsAndPrivacyKV) GetPrivacyKV() *PrivacyKV {
	if m != nil {
		return m.PrivacyKV
	}
	return nil
}

type ReceiptCheckTxList struct {
	Errs []string `protobuf:"bytes,1,rep,name=errs" json:"errs,omitempty"`
}

func (m *ReceiptCheckTxList) Reset()                    { *m = ReceiptCheckTxList{} }
func (m *ReceiptCheckTxList) String() string            { return proto.CompactTextString(m) }
func (*ReceiptCheckTxList) ProtoMessage()               {}
func (*ReceiptCheckTxList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ReceiptCheckTxList) GetErrs() []string {
	if m != nil {
		return m.Errs
	}
	return nil
}

// 区块链状态
// 	 currentHeight : 区块最新高度
// 	 mempoolSize :内存池大小
// 	 msgQueueSize : 消息队列大小
type ChainStatus struct {
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight" json:"currentHeight,omitempty"`
	MempoolSize   int64 `protobuf:"varint,2,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	MsgQueueSize  int64 `protobuf:"varint,3,opt,name=msgQueueSize" json:"msgQueueSize,omitempty"`
}

func (m *ChainStatus) Reset()                    { *m = ChainStatus{} }
func (m *ChainStatus) String() string            { return proto.CompactTextString(m) }
func (*ChainStatus) ProtoMessage()               {}
func (*ChainStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *ChainStatus) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *ChainStatus) GetMempoolSize() int64 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *ChainStatus) GetMsgQueueSize() int64 {
	if m != nil {
		return m.MsgQueueSize
	}
	return 0
}

// 获取区块信息
// 	 start : 获取区块的开始高度
// 	 end :获取区块的结束高度
// 	 Isdetail : 是否需要获取区块的详细信息
// 	 pid : peer列表
type ReqBlocks struct {
	Start    int64    `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64    `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	IsDetail bool     `protobuf:"varint,3,opt,name=isDetail" json:"isDetail,omitempty"`
	Pid      []string `protobuf:"bytes,4,rep,name=pid" json:"pid,omitempty"`
}

func (m *ReqBlocks) Reset()                    { *m = ReqBlocks{} }
func (m *ReqBlocks) String() string            { return proto.CompactTextString(m) }
func (*ReqBlocks) ProtoMessage()               {}
func (*ReqBlocks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *ReqBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqBlocks) GetIsDetail() bool {
	if m != nil {
		return m.IsDetail
	}
	return false
}

func (m *ReqBlocks) GetPid() []string {
	if m != nil {
		return m.Pid
	}
	return nil
}

type MempoolSize struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *MempoolSize) Reset()                    { *m = MempoolSize{} }
func (m *MempoolSize) String() string            { return proto.CompactTextString(m) }
func (*MempoolSize) ProtoMessage()               {}
func (*MempoolSize) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *MempoolSize) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 区块体信息
// 	 txs : 区块上所有交易列表
// 	 receipts :区块上所有交易的收据信息列表
type BlockBody struct {
	Txs        []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
	Receipts   []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
	MainHash   []byte         `protobuf:"bytes,3,opt,name=mainHash,proto3" json:"mainHash,omitempty"`
	MainHeight int64          `protobuf:"varint,4,opt,name=mainHeight" json:"mainHeight,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

func (m *BlockBody) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockBody) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *BlockBody) GetMainHash() []byte {
	if m != nil {
		return m.MainHash
	}
	return nil
}

func (m *BlockBody) GetMainHeight() int64 {
	if m != nil {
		return m.MainHeight
	}
	return 0
}

//  区块追赶主链状态，用于判断本节点区块是否已经同步好
type IsCaughtUp struct {
	Iscaughtup bool `protobuf:"varint,1,opt,name=Iscaughtup" json:"Iscaughtup,omitempty"`
}

func (m *IsCaughtUp) Reset()                    { *m = IsCaughtUp{} }
func (m *IsCaughtUp) String() string            { return proto.CompactTextString(m) }
func (*IsCaughtUp) ProtoMessage()               {}
func (*IsCaughtUp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *IsCaughtUp) GetIscaughtup() bool {
	if m != nil {
		return m.Iscaughtup
	}
	return false
}

//  ntp时钟状态
type IsNtpClockSync struct {
	Isntpclocksync bool `protobuf:"varint,1,opt,name=isntpclocksync" json:"isntpclocksync,omitempty"`
}

func (m *IsNtpClockSync) Reset()                    { *m = IsNtpClockSync{} }
func (m *IsNtpClockSync) String() string            { return proto.CompactTextString(m) }
func (*IsNtpClockSync) ProtoMessage()               {}
func (*IsNtpClockSync) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *IsNtpClockSync) GetIsntpclocksync() bool {
	if m != nil {
		return m.Isntpclocksync
	}
	return false
}

type ChainExecutor struct {
	Driver    string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	FuncName  string `protobuf:"bytes,2,opt,name=funcName" json:"funcName,omitempty"`
	StateHash []byte `protobuf:"bytes,3,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Param     []byte `protobuf:"bytes,4,opt,name=param,proto3" json:"param,omitempty"`
	// 扩展字段，用于额外的用途
	Extra []byte `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *ChainExecutor) Reset()                    { *m = ChainExecutor{} }
func (m *ChainExecutor) String() string            { return proto.CompactTextString(m) }
func (*ChainExecutor) ProtoMessage()               {}
func (*ChainExecutor) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *ChainExecutor) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *ChainExecutor) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *ChainExecutor) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ChainExecutor) GetParam() []byte {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *ChainExecutor) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

//  通过block hash记录block的操作类型及add/del：1/2
type BlockSequence struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Type int64  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *BlockSequence) Reset()                    { *m = BlockSequence{} }
func (m *BlockSequence) String() string            { return proto.CompactTextString(m) }
func (*BlockSequence) ProtoMessage()               {}
func (*BlockSequence) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *BlockSequence) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockSequence) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

// resp
type BlockSequences struct {
	Items []*BlockSequence `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockSequences) Reset()                    { *m = BlockSequences{} }
func (m *BlockSequences) String() string            { return proto.CompactTextString(m) }
func (*BlockSequences) ProtoMessage()               {}
func (*BlockSequences) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *BlockSequences) GetItems() []*BlockSequence {
	if m != nil {
		return m.Items
	}
	return nil
}

// 平行链区块详细信息
// 	 blockdetail : 区块详细信息
// 	 sequence :区块序列号
//   isSync:写数据库时是否需要刷盘
type ParaChainBlockDetail struct {
	Blockdetail *BlockDetail `protobuf:"bytes,1,opt,name=blockdetail" json:"blockdetail,omitempty"`
	Sequence    int64        `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	IsSync      bool         `protobuf:"varint,3,opt,name=isSync" json:"isSync,omitempty"`
}

func (m *ParaChainBlockDetail) Reset()                    { *m = ParaChainBlockDetail{} }
func (m *ParaChainBlockDetail) String() string            { return proto.CompactTextString(m) }
func (*ParaChainBlockDetail) ProtoMessage()               {}
func (*ParaChainBlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *ParaChainBlockDetail) GetBlockdetail() *BlockDetail {
	if m != nil {
		return m.Blockdetail
	}
	return nil
}

func (m *ParaChainBlockDetail) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ParaChainBlockDetail) GetIsSync() bool {
	if m != nil {
		return m.IsSync
	}
	return false
}

// 定义para交易结构
type ParaTxDetails struct {
	Items []*ParaTxDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ParaTxDetails) Reset()                    { *m = ParaTxDetails{} }
func (m *ParaTxDetails) String() string            { return proto.CompactTextString(m) }
func (*ParaTxDetails) ProtoMessage()               {}
func (*ParaTxDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *ParaTxDetails) GetItems() []*ParaTxDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

// type:平行链交易所在区块add/del操作，方便平行链回滚
// header:平行链交易所在区块头信息
// txDetails:本区块中指定title平行链的所有交易
type ParaTxDetail struct {
	Type      int64       `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Header    *Header     `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	TxDetails []*TxDetail `protobuf:"bytes,3,rep,name=txDetails" json:"txDetails,omitempty"`
}

func (m *ParaTxDetail) Reset()                    { *m = ParaTxDetail{} }
func (m *ParaTxDetail) String() string            { return proto.CompactTextString(m) }
func (*ParaTxDetail) ProtoMessage()               {}
func (*ParaTxDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *ParaTxDetail) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ParaTxDetail) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ParaTxDetail) GetTxDetails() []*TxDetail {
	if m != nil {
		return m.TxDetails
	}
	return nil
}

// 交易的详情：
// index:本交易在block中索引值，用于proof的证明
// tx:本交易内容
// receipt:本交易在主链的执行回执
// proofs:本交易hash在block中merkel中的路径
type TxDetail struct {
	Index   uint32       `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Tx      *Transaction `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
	Receipt *ReceiptData `protobuf:"bytes,3,opt,name=receipt" json:"receipt,omitempty"`
	Proofs  [][]byte     `protobuf:"bytes,4,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (m *TxDetail) Reset()                    { *m = TxDetail{} }
func (m *TxDetail) String() string            { return proto.CompactTextString(m) }
func (*TxDetail) ProtoMessage()               {}
func (*TxDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *TxDetail) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxDetail) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxDetail) GetReceipt() *ReceiptData {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *TxDetail) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

// 通过seq区间和title请求平行链的交易
type ReqParaTxByTitle struct {
	Start int64  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End   int64  `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	IsSeq bool   `protobuf:"varint,4,opt,name=isSeq" json:"isSeq,omitempty"`
}

func (m *ReqParaTxByTitle) Reset()                    { *m = ReqParaTxByTitle{} }
func (m *ReqParaTxByTitle) String() string            { return proto.CompactTextString(m) }
func (*ReqParaTxByTitle) ProtoMessage()               {}
func (*ReqParaTxByTitle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *ReqParaTxByTitle) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqParaTxByTitle) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqParaTxByTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqParaTxByTitle) GetIsSeq() bool {
	if m != nil {
		return m.IsSeq
	}
	return false
}

// 导出block文件头信息
type FileHeader struct {
	StartHeight int64  `protobuf:"varint,1,opt,name=startHeight" json:"startHeight,omitempty"`
	Driver      string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	TestNet     bool   `protobuf:"varint,4,opt,name=testNet" json:"testNet,omitempty"`
}

func (m *FileHeader) Reset()                    { *m = FileHeader{} }
func (m *FileHeader) String() string            { return proto.CompactTextString(m) }
func (*FileHeader) ProtoMessage()               {}
func (*FileHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

func (m *FileHeader) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *FileHeader) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *FileHeader) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FileHeader) GetTestNet() bool {
	if m != nil {
		return m.TestNet
	}
	return false
}

// 存储block高度和hash
type EndBlock struct {
	Height int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *EndBlock) Reset()                    { *m = EndBlock{} }
func (m *EndBlock) String() string            { return proto.CompactTextString(m) }
func (*EndBlock) ProtoMessage()               {}
func (*EndBlock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *EndBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EndBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// 通过seq获取区块的header信息
type HeaderSeq struct {
	Num    int64          `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Seq    *BlockSequence `protobuf:"bytes,2,opt,name=seq" json:"seq,omitempty"`
	Header *Header        `protobuf:"bytes,3,opt,name=header" json:"header,omitempty"`
}

func (m *HeaderSeq) Reset()                    { *m = HeaderSeq{} }
func (m *HeaderSeq) String() string            { return proto.CompactTextString(m) }
func (*HeaderSeq) ProtoMessage()               {}
func (*HeaderSeq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *HeaderSeq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *HeaderSeq) GetSeq() *BlockSequence {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *HeaderSeq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// 批量推送区块的header信息
type HeaderSeqs struct {
	Seqs []*HeaderSeq `protobuf:"bytes,1,rep,name=seqs" json:"seqs,omitempty"`
}

func (m *HeaderSeqs) Reset()                    { *m = HeaderSeqs{} }
func (m *HeaderSeqs) String() string            { return proto.CompactTextString(m) }
func (*HeaderSeqs) ProtoMessage()               {}
func (*HeaderSeqs) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *HeaderSeqs) GetSeqs() []*HeaderSeq {
	if m != nil {
		return m.Seqs
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*Blocks)(nil), "types.Blocks")
	proto.RegisterType((*BlockSeqCB)(nil), "types.BlockSeqCB")
	proto.RegisterType((*BlockSeqCBs)(nil), "types.BlockSeqCBs")
	proto.RegisterType((*BlockSeq)(nil), "types.BlockSeq")
	proto.RegisterType((*BlockSeqs)(nil), "types.BlockSeqs")
	proto.RegisterType((*BlockPid)(nil), "types.BlockPid")
	proto.RegisterType((*BlockDetails)(nil), "types.BlockDetails")
	proto.RegisterType((*Headers)(nil), "types.Headers")
	proto.RegisterType((*HeadersPid)(nil), "types.HeadersPid")
	proto.RegisterType((*BlockOverview)(nil), "types.BlockOverview")
	proto.RegisterType((*BlockDetail)(nil), "types.BlockDetail")
	proto.RegisterType((*Receipts)(nil), "types.Receipts")
	proto.RegisterType((*PrivacyKV)(nil), "types.PrivacyKV")
	proto.RegisterType((*PrivacyKVToken)(nil), "types.PrivacyKVToken")
	proto.RegisterType((*ReceiptsAndPrivacyKV)(nil), "types.ReceiptsAndPrivacyKV")
	proto.RegisterType((*ReceiptCheckTxList)(nil), "types.ReceiptCheckTxList")
	proto.RegisterType((*ChainStatus)(nil), "types.ChainStatus")
	proto.RegisterType((*ReqBlocks)(nil), "types.ReqBlocks")
	proto.RegisterType((*MempoolSize)(nil), "types.MempoolSize")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*BlockBody)(nil), "types.BlockBody")
	proto.RegisterType((*IsCaughtUp)(nil), "types.IsCaughtUp")
	proto.RegisterType((*IsNtpClockSync)(nil), "types.IsNtpClockSync")
	proto.RegisterType((*ChainExecutor)(nil), "types.ChainExecutor")
	proto.RegisterType((*BlockSequence)(nil), "types.BlockSequence")
	proto.RegisterType((*BlockSequences)(nil), "types.BlockSequences")
	proto.RegisterType((*ParaChainBlockDetail)(nil), "types.ParaChainBlockDetail")
	proto.RegisterType((*ParaTxDetails)(nil), "types.ParaTxDetails")
	proto.RegisterType((*ParaTxDetail)(nil), "types.ParaTxDetail")
	proto.RegisterType((*TxDetail)(nil), "types.TxDetail")
	proto.RegisterType((*ReqParaTxByTitle)(nil), "types.ReqParaTxByTitle")
	proto.RegisterType((*FileHeader)(nil), "types.FileHeader")
	proto.RegisterType((*EndBlock)(nil), "types.EndBlock")
	proto.RegisterType((*HeaderSeq)(nil), "types.HeaderSeq")
	proto.RegisterType((*HeaderSeqs)(nil), "types.HeaderSeqs")
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xd6, 0xfa, 0x27, 0xb1, 0x8f, 0xed, 0x90, 0x0e, 0x06, 0x59, 0x11, 0x50, 0x77, 0x28, 0xc5,
	0x94, 0xe2, 0xa2, 0x04, 0x95, 0x0a, 0x81, 0x04, 0x49, 0x8b, 0x1a, 0x52, 0x4a, 0x98, 0xb8, 0xb9,
	0xe0, 0x6e, 0xbb, 0x9e, 0xc4, 0xab, 0xda, 0xbb, 0x9b, 0x9d, 0x59, 0x63, 0x73, 0xc5, 0x35, 0x12,
	0x8f, 0xc0, 0x0b, 0x20, 0xde, 0x89, 0x57, 0x41, 0xe7, 0xcc, 0x8c, 0x77, 0xd7, 0x24, 0x81, 0x8a,
	0x2b, 0xee, 0xe6, 0xfc, 0xcd, 0xf9, 0xe6, 0xcc, 0x9c, 0x9f, 0x81, 0xed, 0x17, 0xd3, 0x38, 0x78,
	0x19, 0x4c, 0xfc, 0x30, 0x1a, 0x26, 0x69, 0xac, 0x63, 0x56, 0xd7, 0xcb, 0x44, 0xaa, 0x9d, 0x1b,
	0x3a, 0xf5, 0x23, 0xe5, 0x07, 0x3a, 0x8c, 0xad, 0x64, 0xa7, 0x1d, 0xc4, 0xb3, 0x99, 0xa3, 0xf8,
	0x1f, 0x15, 0xd8, 0x78, 0x22, 0xfd, 0xb1, 0x4c, 0x59, 0x0f, 0x36, 0xe7, 0x32, 0x55, 0x61, 0x1c,
	0xf5, 0xbc, 0xbe, 0x37, 0xa8, 0x0a, 0x47, 0xb2, 0x77, 0x00, 0x12, 0x3f, 0x95, 0x91, 0x7e, 0xe2,
	0xab, 0x49, 0xaf, 0xd2, 0xf7, 0x06, 0x6d, 0x51, 0xe0, 0xb0, 0x37, 0x61, 0x43, 0x2f, 0x48, 0x56,
	0x25, 0x99, 0xa5, 0xd8, 0x5b, 0xd0, 0x54, 0xda, 0xd7, 0x92, 0x44, 0x35, 0x12, 0xe5, 0x0c, 0xb4,
	0x9a, 0xc8, 0xf0, 0x7c, 0xa2, 0x7b, 0x75, 0x72, 0x67, 0x29, 0xb4, 0xa2, 0xe3, 0x8c, 0xc2, 0x99,
	0xec, 0x6d, 0x90, 0x28, 0x67, 0x20, 0x4a, 0xbd, 0x38, 0x88, 0xb3, 0x48, 0xf7, 0x9a, 0x06, 0xa5,
	0x25, 0x19, 0x83, 0xda, 0x04, 0x1d, 0x01, 0x39, 0xa2, 0x35, 0x22, 0x1f, 0x87, 0x67, 0x67, 0x61,
	0x90, 0x4d, 0xf5, 0xb2, 0xd7, 0xea, 0x7b, 0x83, 0x8e, 0x28, 0x70, 0xd8, 0x10, 0x9a, 0x2a, 0x3c,
	0x8f, 0x7c, 0x9d, 0xa5, 0xb2, 0xd7, 0xe8, 0x7b, 0x83, 0xd6, 0xee, 0xf6, 0x90, 0x42, 0x37, 0x3c,
	0x71, 0x7c, 0x91, 0xab, 0xf0, 0x3f, 0x2b, 0x50, 0xdf, 0x47, 0x2c, 0xff, 0x93, 0x68, 0xfd, 0xd3,
	0xf9, 0x77, 0xa0, 0x31, 0xf3, 0xc3, 0x88, 0x5c, 0xb6, 0xc9, 0xe5, 0x8a, 0x46, 0x5b, 0x5a, 0x1b,
	0xaf, 0x1d, 0xda, 0xba, 0xc0, 0x79, 0xd5, 0xd8, 0xb1, 0xdb, 0x50, 0xd5, 0x0b, 0xd5, 0xdb, 0xec,
	0x57, 0x07, 0xad, 0x5d, 0x66, 0x35, 0x47, 0xf9, 0xfb, 0x14, 0x28, 0xe6, 0xf7, 0x60, 0x83, 0x02,
	0xac, 0x18, 0x87, 0x7a, 0xa8, 0xe5, 0x4c, 0xf5, 0x3c, 0xb2, 0x68, 0x5b, 0x0b, 0x92, 0x0a, 0x23,
	0xe2, 0x67, 0x00, 0x44, 0x9f, 0xc8, 0x8b, 0x83, 0x7d, 0x7c, 0x01, 0x91, 0x3f, 0x93, 0x74, 0x21,
	0x4d, 0x41, 0x6b, 0xb6, 0x0d, 0xd5, 0xe7, 0xe2, 0x29, 0x5d, 0x43, 0x53, 0xe0, 0x12, 0x23, 0x29,
	0xa3, 0x20, 0x1e, 0x4b, 0x8a, 0x7f, 0x53, 0x58, 0x0a, 0x63, 0x11, 0x2a, 0x93, 0x0b, 0x14, 0xfe,
	0x86, 0x58, 0xd1, 0xfc, 0x01, 0xb4, 0x72, 0x3f, 0x8a, 0xbd, 0x5f, 0x86, 0x76, 0xa3, 0x08, 0x8d,
	0x54, 0x1c, 0xbe, 0x04, 0x1a, 0x8e, 0x89, 0x48, 0xa2, 0x6c, 0x66, 0x5f, 0x0b, 0x2e, 0xd9, 0x1d,
	0xa8, 0x2a, 0x79, 0x41, 0xd8, 0x5a, 0xbb, 0xdd, 0xb5, 0x4d, 0x32, 0x19, 0x05, 0x52, 0xa0, 0x02,
	0xbb, 0x0b, 0x1b, 0x63, 0xa9, 0xfd, 0x70, 0x4a, 0x88, 0xf3, 0xe0, 0x91, 0xea, 0x23, 0x92, 0x08,
	0xab, 0xc1, 0x3f, 0x86, 0xa6, 0xdb, 0x41, 0xb1, 0x77, 0xa1, 0xa6, 0xe4, 0x85, 0x83, 0xf9, 0xda,
	0x9a, 0x07, 0x41, 0x42, 0xfe, 0xa5, 0xc5, 0x78, 0x1c, 0x8e, 0x11, 0x63, 0x12, 0x8e, 0x6d, 0x00,
	0x71, 0x89, 0xb7, 0x40, 0xcf, 0xc9, 0xa2, 0x5c, 0xbb, 0x05, 0x12, 0xf1, 0x87, 0xd0, 0x2e, 0x40,
	0x51, 0x6c, 0x50, 0x0e, 0xcf, 0x65, 0x70, 0x6d, 0x7c, 0x86, 0xb0, 0x69, 0x22, 0x8c, 0x58, 0x4b,
	0x46, 0x1d, 0x6b, 0x64, 0xc4, 0x4e, 0xff, 0x09, 0x80, 0xd5, 0xbf, 0x1c, 0xed, 0x00, 0x36, 0x27,
	0x46, 0x6e, 0xf1, 0x6e, 0x95, 0xb6, 0x51, 0xc2, 0x89, 0xf9, 0x04, 0x3a, 0x84, 0xe7, 0xbb, 0xb9,
	0x4c, 0xe7, 0xa1, 0xfc, 0x91, 0xdd, 0x82, 0x1a, 0xca, 0x68, 0xb7, 0xbf, 0xb9, 0x27, 0x51, 0xb1,
	0xf6, 0x54, 0xca, 0xb5, 0x67, 0x07, 0x1a, 0x26, 0x8b, 0xa5, 0xea, 0x55, 0xfb, 0x55, 0xcc, 0x23,
	0x47, 0xf3, 0xdf, 0x3d, 0xfb, 0x78, 0xcc, 0xd1, 0xf3, 0x88, 0x7a, 0x57, 0x46, 0x94, 0x0d, 0xa1,
	0x91, 0xca, 0x40, 0x86, 0x89, 0xc6, 0x83, 0x14, 0x83, 0x28, 0x0c, 0xfb, 0x91, 0xaf, 0x7d, 0xb1,
	0xd2, 0x61, 0x37, 0xa1, 0x72, 0x74, 0x4a, 0x9e, 0xf3, 0x6b, 0x3e, 0x92, 0xcb, 0x53, 0x7f, 0x9a,
	0x49, 0x51, 0x39, 0x3a, 0x65, 0x77, 0x60, 0x2b, 0x49, 0xe5, 0xfc, 0x44, 0xfb, 0x3a, 0x53, 0x85,
	0x0a, 0xb3, 0xc6, 0xe5, 0x0f, 0xa0, 0x21, 0xdc, 0xa6, 0x77, 0x0b, 0x20, 0xcc, 0xa5, 0x6c, 0x95,
	0x41, 0xe4, 0x00, 0xf8, 0x37, 0xd0, 0x3c, 0x4e, 0xc3, 0xb9, 0x1f, 0x2c, 0x8f, 0x4e, 0xd9, 0x17,
	0xe8, 0xcc, 0x12, 0xa3, 0xf8, 0xa5, 0x8c, 0xac, 0xf9, 0x1b, 0xd6, 0xfc, 0xb8, 0x24, 0x14, 0x6b,
	0xca, 0x7c, 0x09, 0x5b, 0x65, 0x0d, 0xd6, 0x85, 0xba, 0xb6, 0xfb, 0xe0, 0x55, 0x1b, 0xc2, 0x5c,
	0xc7, 0x61, 0x34, 0x96, 0x0b, 0xba, 0x8e, 0xba, 0x70, 0xa4, 0x29, 0xb1, 0x93, 0x52, 0x89, 0xa5,
	0x76, 0x60, 0xc2, 0x54, 0xbb, 0x32, 0x4c, 0x5c, 0x41, 0xd7, 0x1d, 0xff, 0xab, 0x68, 0x9c, 0x9f,
	0xe8, 0xc3, 0x52, 0x28, 0xbc, 0x82, 0xb9, 0x53, 0x2f, 0x5c, 0xc6, 0x10, 0x9a, 0xab, 0x13, 0xd9,
	0x67, 0xb8, 0xbd, 0x7e, 0x72, 0x91, 0xab, 0xf0, 0x01, 0x30, 0xbb, 0xcb, 0xc1, 0x44, 0x06, 0x2f,
	0x47, 0x8b, 0xa7, 0xa1, 0xa2, 0x76, 0x26, 0xd3, 0xd4, 0x44, 0xbe, 0x29, 0x68, 0xcd, 0x97, 0xd0,
	0x3a, 0xc0, 0x26, 0x6f, 0x2e, 0x8c, 0xdd, 0x86, 0x4e, 0x90, 0xa5, 0xd4, 0x58, 0x4c, 0x91, 0x36,
	0xb5, 0xa5, 0xcc, 0x64, 0x7d, 0x68, 0xcd, 0xe4, 0x2c, 0x89, 0xe3, 0xe9, 0x49, 0xf8, 0x93, 0xb4,
	0x2f, 0xb7, 0xc8, 0x62, 0x1c, 0xda, 0x33, 0x75, 0xfe, 0x7d, 0x26, 0x33, 0x49, 0x2a, 0x55, 0x52,
	0x29, 0xf1, 0xb8, 0x0f, 0x4d, 0x21, 0x2f, 0x6c, 0x69, 0xee, 0x42, 0x5d, 0x69, 0x3f, 0x75, 0x0e,
	0x0d, 0x81, 0xe9, 0x28, 0xa3, 0xb1, 0x75, 0x80, 0x4b, 0x53, 0x52, 0x1f, 0xe5, 0xa5, 0x8b, 0x4a,
	0xaa, 0x4d, 0x03, 0x9b, 0xbc, 0x35, 0x3a, 0x1e, 0x2e, 0xf9, 0x2d, 0x68, 0x7d, 0x5b, 0x40, 0xc5,
	0xa0, 0xa6, 0x10, 0x8d, 0xf1, 0x41, 0x6b, 0x7e, 0x17, 0xb6, 0x85, 0x4c, 0xa6, 0x4b, 0xc2, 0x61,
	0xcf, 0x97, 0x77, 0x46, 0xaf, 0xd8, 0x19, 0xf9, 0x6f, 0x9e, 0x2d, 0x85, 0xfb, 0xf1, 0x78, 0xe9,
	0xba, 0x8f, 0x77, 0x6d, 0xf7, 0x79, 0xe5, 0xbc, 0x2b, 0xf6, 0xcf, 0xea, 0xb5, 0xfd, 0xb3, 0xb6,
	0xde, 0x3f, 0xf9, 0x3d, 0x80, 0x43, 0x75, 0xe0, 0x67, 0xe7, 0x13, 0xfd, 0x3c, 0x41, 0xed, 0x43,
	0x15, 0x10, 0x95, 0x25, 0x74, 0x92, 0x86, 0x28, 0x70, 0xf8, 0x43, 0xd8, 0x3a, 0x54, 0xcf, 0x74,
	0x72, 0x40, 0xc5, 0x7b, 0x19, 0x05, 0x98, 0xd2, 0xa1, 0x8a, 0x74, 0x12, 0xd0, 0x9d, 0x2c, 0xa3,
	0xc0, 0x5a, 0xad, 0x71, 0xf9, 0xaf, 0x1e, 0x74, 0xe8, 0xd5, 0x3c, 0x5e, 0xc8, 0x20, 0xd3, 0x71,
	0x8a, 0x11, 0x1b, 0xa7, 0xe1, 0x5c, 0xa6, 0x36, 0x9f, 0x2c, 0x85, 0xa7, 0x39, 0xcb, 0xa2, 0xe0,
	0x19, 0xf6, 0x50, 0xd3, 0x30, 0x57, 0x74, 0x79, 0x3a, 0xa9, 0xae, 0x4f, 0x27, 0x5d, 0xa8, 0x27,
	0x7e, 0xea, 0xcf, 0x6c, 0x55, 0x31, 0x04, 0x72, 0xe5, 0x42, 0xa7, 0x3e, 0x8d, 0x2c, 0x6d, 0x61,
	0x08, 0xfe, 0xa9, 0xad, 0xbc, 0xae, 0xc7, 0xe1, 0x45, 0xd3, 0xae, 0x9e, 0x19, 0xdc, 0x68, 0x43,
	0x06, 0xb5, 0xd1, 0x32, 0x71, 0xaf, 0x95, 0xd6, 0xfc, 0x73, 0xd8, 0x2a, 0x19, 0x62, 0x85, 0x2a,
	0xf5, 0x8c, 0xcb, 0x5b, 0xa8, 0x6d, 0x1d, 0x3f, 0x7b, 0xd0, 0x3d, 0xf6, 0x53, 0x9f, 0x42, 0x51,
	0xac, 0xc7, 0x9f, 0x40, 0x8b, 0x8a, 0xae, 0x6d, 0xb1, 0xde, 0x95, 0x2d, 0xb6, 0xa8, 0x86, 0xb1,
	0x52, 0xd6, 0x83, 0x05, 0xb9, 0xa2, 0x31, 0xbe, 0xa1, 0xc2, 0x3b, 0xb2, 0x8f, 0xde, 0x52, 0xfc,
	0x33, 0xe8, 0x20, 0x82, 0xd1, 0xc2, 0x35, 0xca, 0x0f, 0xca, 0xf8, 0x5f, 0x77, 0x55, 0xa2, 0xa0,
	0xe4, 0xe0, 0x2f, 0xa0, 0x5d, 0x64, 0x63, 0x80, 0x50, 0xd9, 0x65, 0x07, 0xae, 0xd9, 0x7b, 0x98,
	0x09, 0x34, 0xbf, 0x54, 0x2e, 0x6b, 0x62, 0x56, 0xc8, 0x3e, 0x82, 0xa6, 0x76, 0x10, 0xd6, 0x7a,
	0xc6, 0xca, 0x6b, 0xae, 0xc1, 0x7f, 0xf1, 0xa0, 0xb1, 0x72, 0xdb, 0x85, 0x7a, 0x48, 0x15, 0xd7,
	0xa3, 0x59, 0xd2, 0x10, 0x8c, 0x43, 0x45, 0x2f, 0xac, 0xd3, 0xcb, 0x72, 0xab, 0xa2, 0x17, 0xec,
	0x1e, 0x6c, 0xda, 0xb4, 0x59, 0x9b, 0x62, 0x8a, 0x99, 0xe5, 0x54, 0x30, 0x84, 0x49, 0x1a, 0xc7,
	0x67, 0x8a, 0x0a, 0x44, 0x5b, 0x58, 0x8a, 0x9f, 0x61, 0x01, 0xb8, 0x30, 0x91, 0xd8, 0x5f, 0x8e,
	0x42, 0x3d, 0x95, 0xff, 0xba, 0x1a, 0x61, 0x17, 0x41, 0x03, 0x3b, 0xf7, 0x19, 0x82, 0x4e, 0xa4,
	0x4e, 0xe4, 0x85, 0x9d, 0xf9, 0x0c, 0xc1, 0xe7, 0x00, 0x5f, 0x87, 0x53, 0x69, 0xbf, 0x46, 0x7d,
	0x68, 0xd1, 0xa6, 0xa5, 0x32, 0x5b, 0x64, 0x15, 0x52, 0xaa, 0x52, 0x4a, 0xa9, 0xcb, 0x7d, 0x62,
	0xe7, 0x92, 0x4a, 0x3f, 0x93, 0xda, 0x7a, 0x75, 0x24, 0xf6, 0xdf, 0xc7, 0xd1, 0xd8, 0x7c, 0x31,
	0xae, 0x28, 0x6c, 0xab, 0x8f, 0x4e, 0x25, 0xff, 0xe8, 0xf0, 0x29, 0x34, 0x0d, 0xd6, 0xff, 0x36,
	0x69, 0xe6, 0x2f, 0xa8, 0x7a, 0xcd, 0x0b, 0xe2, 0xbb, 0x6e, 0x0c, 0xa3, 0x29, 0xf3, 0x76, 0x69,
	0xca, 0xdc, 0x2e, 0x99, 0xac, 0xc6, 0xcc, 0xfd, 0x9b, 0x3f, 0xbc, 0x7d, 0x1e, 0xea, 0x49, 0xf6,
	0x62, 0x18, 0xc4, 0xb3, 0xfb, 0x7b, 0x7b, 0x41, 0x74, 0x9f, 0x3e, 0xac, 0x7b, 0x7b, 0xf7, 0xc9,
	0xe0, 0xc5, 0x06, 0xfd, 0x48, 0xf7, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x62, 0xf1, 0x52, 0x67,
	0xcd, 0x0e, 0x00, 0x00,
}
